class AuthGuard {constructor() {this.user = null; this.isAuthenticated = false;} async init() {await this.checkAuthStatus(); this.setupAuthListeners();} async checkAuthStatus() {try {const token = localStorage.getItem('airhost_token'); if (token && window.AirHostAPI) {try {const response = await window.AirHostAPI.getProfile(); if (response.success && response.user) {this.user = response.user; this.isAuthenticated = true; console.log('✅ User authenticated with backend:',response.user.email); return true;} else {console.warn('❌ Profile validation failed:',response.error || 'No user data'); this.clearAuth();} } catch (error) {console.warn('❌ Token validation failed:',error.message); if (error.message.includes('401') || error.message.includes('Sesión expirada')) {this.clearAuth();} else {console.log('🔄 Keeping token for retry on network errors'); return token ? true : false;} } } this.clearAuth(); return false;} catch (error) {console.error('Auth check failed:',error); this.clearAuth(); return false;} } async requireAuth() {const isAuth = await this.checkAuthStatus(); if (!isAuth) {console.log('🔒 Authentication required,redirecting to login'); const currentPath = window.location.pathname + window.location.search; window.location.href = `/login.html?return=${encodeURIComponent(currentPath)}`; return false;} return true;} async logout() {try {if (window.AirHostAPI) {await window.AirHostAPI.logout();} } catch (error) {console.warn('Logout API call failed:',error);} this.clearAuth(); window.location.href = '/';} clearAuth() {this.user = null; this.isAuthenticated = false; localStorage.removeItem('airhost_token');} getUser() {return this.user;} isLoggedIn() {return this.isAuthenticated;} setupAuthListeners() {window.addEventListener('storage',(e) => {if (e.key === 'airhost_token' && !e.newValue) {console.log('🔒 Token removed in another tab,logging out'); this.clearAuth(); window.location.href = '/login.html';} }); document.addEventListener('click',(e) => {if (e.target.matches('[data-logout]') || e.target.closest('[data-logout]')) {e.preventDefault(); this.logout();} });} addUserInfo(selector = '.user-info') {const userInfoElements = document.querySelectorAll(selector); userInfoElements.forEach(element => {if (this.user) {element.textContent = this.user.email || this.user.name || 'Usuario';} });} addUserAvatar(selector = '.user-avatar') {const avatarElements = document.querySelectorAll(selector); avatarElements.forEach(element => {if (this.user) {const initial = (this.user.name || this.user.email || 'U').charAt(0).toUpperCase(); element.textContent = initial;} });} } window.AuthGuard = new AuthGuard(); document.addEventListener('DOMContentLoaded',async () => {await window.AuthGuard.init(); console.log('🔐 AuthGuard initialized');}); window.requireAuth = async () => {return await window.AuthGuard.requireAuth();}; window.logout = async () => {return await window.AuthGuard.logout();}; console.log('🛡️ Auth system loaded');