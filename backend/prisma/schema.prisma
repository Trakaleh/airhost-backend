// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  phone     String
  company   String?
  
  // Plan y suscripci√≥n
  plan      String   @default("basic") // basic, pro, enterprise
  
  // Stripe
  stripeCustomerId     String?
  stripeSubscriptionId String?
  subscriptionStatus   String   @default("active") // active, canceled, past_due
  currentPeriodEnd     DateTime?
  
  // Preferencias
  language    String  @default("es") // es, en, fr
  currency    String  @default("EUR") // EUR, USD, GBP
  timezone    String  @default("Europe/Madrid")
  
  // Notificaciones
  emailNotifications     Boolean @default(true)
  whatsappNotifications  Boolean @default(true)
  
  // OAuth
  provider  String?  // google, facebook, etc
  avatar    String?  // Profile picture URL
  
  // Estado
  lastLogin DateTime?
  isActive  Boolean  @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones - SIMPLIFICADO PARA 4 M√ìDULOS ESENCIALES
  properties       Property[]
  messageTemplates MessageTemplate[]
  automationRules  AutomationRule[]
  messages         Message[]
  payments         Payment[]
  notifications    Notification[]
  
  @@map("users")
}

model Property {
  id          String   @id @default(cuid())
  ownerId     String
  
  // Informaci√≥n b√°sica
  name        String
  description String?
  address     String
  city        String
  country     String
  postalCode  String?
  
  propertyType String // apartment, house, villa, studio, room
  
  // Images
  images     Json?    // Array of image URLs
  
  // Capacidad
  maxGuests  Int
  bedrooms   Int
  bathrooms  Int
  
  // Channel Manager (JSON for flexible channel data)
  channelsConfig Json? // { airbnb: { listingId, icalUrl, isActive, lastSync }, booking: {...} }
  
  // Smart Lock - ELIMINADO (no es m√≥dulo esencial)
  
  // Precios
  basePrice     Float
  currency      String @default("EUR")
  cleaningFee   Float  @default(0)
  depositAmount Float
  
  // Informaci√≥n de acceso
  wifiName             String?
  wifiPassword         String?
  checkInInstructions  String?
  checkOutInstructions String?
  houseRules           String?
  
  // Templates de mensajes
  welcomeTemplate         String @default("¬°Hola {{guest_name}}! Bienvenido a {{property_name}}.")
  accessInfoTemplate      String @default("Tu c√≥digo de acceso es: {{access_code}}")
  checkoutReminderTemplate String @default("Recordatorio: Check-out hoy a las {{checkout_time}}")
  reviewRequestTemplate   String @default("¬°Esperamos tu rese√±a de 5‚≠ê!")
  
  // Estado y configuraci√≥n
  isActive      Boolean @default(true)
  autoMessaging Boolean @default(true)
  autoPricing   Boolean @default(false)
  
  // Analytics b√°sico (solo lo esencial para el dashboard)
  totalBookings    Int     @default(0)
  totalRevenue     Float   @default(0)
  
  // SEO y marketing
  amenities        Json?   // Array of amenities
  tags             Json?   // Array of tags for categorization
  coordinates      Json?   // { lat: number, lng: number }
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones - SIMPLIFICADO
  owner         User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  reservations  Reservation[]
  channels      Channel[]
  
  @@map("properties")
}

model Reservation {
  id         String   @id @default(cuid())
  propertyId String
  
  // Informaci√≥n del hu√©sped
  guestName     String
  guestEmail    String
  guestPhone    String?
  guestLanguage String  @default("es")
  guestCountry  String?
  guestCount    Int     @default(1)
  
  // Fechas
  checkIn  DateTime
  checkOut DateTime
  nights   Int
  
  // Origen y estado
  source     String // airbnb, booking, vrbo, direct, manual
  externalId String?
  status     String @default("confirmed") // confirmed, pending, checked_in, checked_out, cancelled
  
  // Tiempos de check-in/out
  actualCheckIn  DateTime?
  actualCheckOut DateTime?
  
  // Review y feedback
  guestRating    Float?
  guestReview    String?
  hostRating     Float?
  hostReview     String?
  
  // Precios
  baseAmount     Float
  cleaningFee    Float  @default(0)
  totalAmount    Float
  currency       String @default("EUR")
  
  // C√≥digos de acceso - ELIMINADO (smart locks no es m√≥dulo esencial)
  
  // Fianza
  stripePaymentIntentId String?
  depositAmount         Float?
  depositCurrency       String?
  depositStatus         String? @default("pending") // pending, authorized, captured, released
  depositAuthorizedAt   DateTime?
  depositReleasedAt     DateTime?
  
  // Mensajes enviados (JSON)
  messagesSent Json? // Array de objetos con type, sent_at, platform, content, status
  
  // Notas
  notes String?
  
  // Cancelaci√≥n
  cancelledAt     DateTime?
  cancelledBy     String? // guest, host, platform
  cancellationReason String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones - SIMPLIFICADO
  property    Property     @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  payments    Payment[]
  
  @@map("reservations")
}

// ====================================
// MODELOS ELIMINADOS: Incident, SmartLock, AccessCode
// No son esenciales para los 4 m√≥dulos core
// ====================================

// ====================================
// üí¨ MESSAGING SYSTEM
// ====================================

model MessageTemplate {
  id        String   @id @default(cuid())
  ownerId   String
  
  name      String
  category  String   // welcome, checkin, checkout, review_request, custom
  language  String   @default("es")
  content   String   // Template with placeholders like {{guest_name}}
  variables Json?    // Array of available variables
  
  isActive  Boolean  @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  owner           User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  automationRules AutomationRule[]
  messages        Message[]
  
  @@map("message_templates")
}

model AutomationRule {
  id           String   @id @default(cuid())
  ownerId      String
  templateId   String
  
  name         String
  description  String?
  eventType    String   // booking_confirmed, checkin_reminder, checkout_reminder
  
  // Conditions
  conditions   Json?    // Conditional logic
  delayMinutes Int      @default(0)
  
  // Target properties
  propertyIds  Json?    // Array of property IDs (null = all properties)
  
  // Status
  isActive       Boolean @default(true)
  executionCount Int     @default(0)
  lastExecuted   DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  owner    User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  template MessageTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@map("automation_rules")
}

model Message {
  id         String   @id @default(cuid())
  ownerId    String
  templateId String?
  
  // Recipient
  guestName  String
  guestPhone String
  guestEmail String?
  
  // Message content
  content    String
  platform   String   // whatsapp, sms, email
  
  // Status
  status     String   @default("pending") // pending, sent, delivered, failed
  sentAt     DateTime?
  deliveredAt DateTime?
  errorMessage String?
  
  // Metadata
  metadata   Json?    // Additional message data
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  owner    User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  template MessageTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  
  @@map("messages")
}

// ====================================
// üí≥ PAYMENTS & PRICING
// ====================================

model Payment {
  id            String   @id @default(cuid())
  reservationId String
  ownerId       String
  
  // Payment details
  amount        Float
  currency      String   @default("EUR")
  type          String   // booking, deposit, damage, cleaning
  
  // Stripe integration
  stripePaymentIntentId String?
  stripeChargeId        String?
  stripeCustomerId      String?
  
  // Status
  status        String   @default("pending") // pending, authorized, captured, refunded, failed
  
  // Dates
  authorizedAt  DateTime?
  capturedAt    DateTime?
  refundedAt    DateTime?
  
  // Metadata
  description   String?
  metadata      Json?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  owner       User        @relation(fields: [ownerId], references: [id])
  
  @@map("payments")
}

// ====================================
// MODELOS ELIMINADOS: PricingRule, AnalyticsData
// No son esenciales para los 4 m√≥dulos core
// Pricing AI y Analytics avanzado son features premium
// ====================================

// ====================================
// üîÑ CHANNEL MANAGER ENHANCED
// ====================================

model Channel {
  id         String   @id @default(cuid())
  propertyId String
  
  // Channel info
  name       String   // airbnb, booking, vrbo, expedia
  listingId  String   // External listing ID
  
  // API Configuration
  apiCredentials Json?
  icalUrl        String?
  
  // Sync settings
  syncEnabled    Boolean @default(true)
  lastSync       DateTime?
  syncErrors     Json?   // Array of sync errors
  
  // Status
  isActive       Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@unique([propertyId, name])
  @@map("channels")
}

// ====================================
// üîî NOTIFICATIONS SYSTEM
// ====================================

model Notification {
  id        String   @id @default(cuid())
  userId    String
  
  // Notification details
  title     String
  message   String
  type      String   // info, success, warning, error, booking, payment, system
  category  String?  // reservation, property, payment, system, marketing
  
  // Target and context
  entityType String? // reservation, property, payment
  entityId   String? // ID of related entity
  
  // Status
  isRead     Boolean  @default(false)
  readAt     DateTime?
  
  // Action
  actionUrl  String?  // URL to navigate when clicked
  actionText String?  // Text for action button
  
  // Priority
  priority   String   @default("normal") // low, normal, high, urgent
  
  // Metadata
  metadata   Json?    // Additional data
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

// Add to User model relations
// notifications    Notification[]